<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kafka on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/categories/kafka/</link>
    <description>Recent content in kafka on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 20 Apr 2020 15:11:40 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/kafka/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入Kafka源码 - Kafka Server端的定时任务（定时任务的执行）</title>
      <link>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-kafka-server%E7%AB%AF%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Mon, 20 Apr 2020 15:11:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-kafka-server%E7%AB%AF%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%89%A7%E8%A1%8C/</guid>
      <description>生产者给服务端发送消息后，服务端不会立刻返回响应，而是创建一个DelayedProduce对象做延迟操作。消费者那边的情况与此类似。 前文已经</description>
    </item>
    
    <item>
      <title>深入Kafka源码 - Kafka Server端的定时任务（时间轮的工作原理）</title>
      <link>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-kafka-server%E7%AB%AF%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%97%B6%E9%97%B4%E8%BD%AE%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 19 Apr 2020 15:11:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-kafka-server%E7%AB%AF%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%97%B6%E9%97%B4%E8%BD%AE%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>时间轮的整体结构 如上图所示，时间轮可以描绘为这样一个环形结构。任务存放在每个单元格中。不过并不是一个单元格就对应一个任务，而是一个单元格对应</description>
    </item>
    
    <item>
      <title>深入Kafka源码 - Kafka Server端的定时任务（JDK Timer的实现原理）</title>
      <link>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-kafka-server%E7%AB%AF%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1jdk-timer%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 19 Apr 2020 15:11:30 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-kafka-server%E7%AB%AF%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1jdk-timer%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>Kafka Server端用一个组件（即一个类）叫做DelayedOperationPurgatory，负责定时任务的执行。而我们知道JDK自带了定时</description>
    </item>
    
    <item>
      <title>深入Kafka源码 - Kafka Server端的网络层（Kafka的实现）</title>
      <link>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-kafka-server%E7%AB%AF%E7%9A%84%E7%BD%91%E7%BB%9C%E5%B1%82kafka%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 15 Apr 2020 16:11:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-kafka-server%E7%AB%AF%E7%9A%84%E7%BD%91%E7%BB%9C%E5%B1%82kafka%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>网络层 Kafka Server端的网络层使用的就是多线程多Selector的Reactor模式。 Kafka Server端的启动在KafkaServer类的st</description>
    </item>
    
    <item>
      <title>深入Kafka源码 - Kafka Server端的网络层（Reactor模式介绍）</title>
      <link>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-kafka-server%E7%AB%AF%E7%9A%84%E7%BD%91%E7%BB%9C%E5%B1%82reactor%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 15 Apr 2020 15:11:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-kafka-server%E7%AB%AF%E7%9A%84%E7%BD%91%E7%BB%9C%E5%B1%82reactor%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/</guid>
      <description>Reactor模式是一种事件驱动模式，常见于IO模型中，Java NIO提供了实现该模式的API。本文略去概念的介绍，直接从代码学习。 单线程R</description>
    </item>
    
    <item>
      <title>深入Kafka源码 - Consumer端接收数据全流程</title>
      <link>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-consumer%E7%AB%AF%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%E5%85%A8%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Tue, 31 Mar 2020 15:11:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-consumer%E7%AB%AF%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%E5%85%A8%E6%B5%81%E7%A8%8B/</guid>
      <description>一段比较简单的业务代码通常包含下面4步： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public static void main(String[] args) { ...... // 1.构造KafkaConsumer对象</description>
    </item>
    
    <item>
      <title>深入Kafka源码 - Producer端发送数据全流程</title>
      <link>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-producer%E7%AB%AF%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E5%85%A8%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Mon, 30 Mar 2020 15:11:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/%E6%B7%B1%E5%85%A5kafka%E6%BA%90%E7%A0%81-producer%E7%AB%AF%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E5%85%A8%E6%B5%81%E7%A8%8B/</guid>
      <description>学习Kafka源码简单来说可以分为三部分来学——Producer端、Consumer端和Server端。其中Producer端和Consum</description>
    </item>
    
  </channel>
</rss>